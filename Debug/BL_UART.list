
BL_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e48  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800300c  0800300c  0000400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030d0  080030d0  0000502c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080030d0  080030d0  000040d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030d8  080030d8  0000502c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030d8  080030d8  000040d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030dc  080030dc  000040dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  080030e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000002c  0800310c  0000502c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  0800310c  0000512c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ac9  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df1  00000000  00000000  0000eb25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  00010918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006bd  00000000  00000000  000111f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002132d  00000000  00000000  000118b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b61d  00000000  00000000  00032be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb098  00000000  00000000  0003e1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109297  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022f8  00000000  00000000  001092dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0010b5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000002c 	.word	0x2000002c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002ff4 	.word	0x08002ff4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000030 	.word	0x20000030
 8000200:	08002ff4 	.word	0x08002ff4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <Flash_Sector_Erase>:
};

#define FLASH_SECTOR_COUNT  (sizeof(FlashSectors)/sizeof(FlashSectors[0]))

flash_status Flash_Sector_Erase(uint32_t address, uint32_t size)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08c      	sub	sp, #48	@ 0x30
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
	flash_status status;
	FLASH_EraseInitTypeDef erase_init;
	uint32_t sector_error;
	uint32_t end_address = (address + size) -1;
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	4413      	add	r3, r2
 8000540:	3b01      	subs	r3, #1
 8000542:	62fb      	str	r3, [r7, #44]	@ 0x2c
	const FlashRegion_t *start_sector = GetFlashSector(address);
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f000 f8dd 	bl	8000704 <GetFlashSector>
 800054a:	62b8      	str	r0, [r7, #40]	@ 0x28
	const FlashRegion_t *end_sector   = GetFlashSector((address + size) - 1);
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	4413      	add	r3, r2
 8000552:	3b01      	subs	r3, #1
 8000554:	4618      	mov	r0, r3
 8000556:	f000 f8d5 	bl	8000704 <GetFlashSector>
 800055a:	6278      	str	r0, [r7, #36]	@ 0x24

	if (address < FLASH_START_ADDRESS || end_address > FLASH_END_ADDRESS)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000562:	d303      	bcc.n	800056c <Flash_Sector_Erase+0x3c>
 8000564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000566:	4a1e      	ldr	r2, [pc, #120]	@ (80005e0 <Flash_Sector_Erase+0xb0>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d901      	bls.n	8000570 <Flash_Sector_Erase+0x40>
		return FLASH_ERROR_INVALID_ADDRESS;
 800056c:	2305      	movs	r3, #5
 800056e:	e033      	b.n	80005d8 <Flash_Sector_Erase+0xa8>

	if(HAL_FLASH_Unlock() != HAL_OK)
 8000570:	f000 feea 	bl	8001348 <HAL_FLASH_Unlock>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <Flash_Sector_Erase+0x4e>
		return FLASH_ERROR_UNLOCK;
 800057a:	2304      	movs	r3, #4
 800057c:	e02c      	b.n	80005d8 <Flash_Sector_Erase+0xa8>

	erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
	erase_init.Sector = start_sector->hal_sector_id;
 8000582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000584:	691b      	ldr	r3, [r3, #16]
 8000586:	617b      	str	r3, [r7, #20]
	erase_init.NbSectors = (end_sector->sector_num - start_sector->sector_num) + 1;
 8000588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	3301      	adds	r3, #1
 8000596:	61bb      	str	r3, [r7, #24]
	erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000598:	2302      	movs	r3, #2
 800059a:	61fb      	str	r3, [r7, #28]

	status = HAL_FLASHEx_Erase(&erase_init,&sector_error);
 800059c:	f107 0208 	add.w	r2, r7, #8
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 f840 	bl	800162c <HAL_FLASHEx_Erase>
 80005ac:	4603      	mov	r3, r0
 80005ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if(status != FLASH_OK)
 80005b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <Flash_Sector_Erase+0x8e>
	{
		return FLASH_ERASE_ERROR;
 80005ba:	2303      	movs	r3, #3
 80005bc:	e00c      	b.n	80005d8 <Flash_Sector_Erase+0xa8>
	}

	HAL_FLASH_Lock();
 80005be:	f000 fee5 	bl	800138c <HAL_FLASH_Lock>

	if (status != FLASH_OK || sector_error != 0xFFFFFFFF)
 80005c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d103      	bne.n	80005d2 <Flash_Sector_Erase+0xa2>
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d001      	beq.n	80005d6 <Flash_Sector_Erase+0xa6>
		return FLASH_ERASE_ERROR;
 80005d2:	2303      	movs	r3, #3
 80005d4:	e000      	b.n	80005d8 <Flash_Sector_Erase+0xa8>

	return FLASH_OK;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3730      	adds	r7, #48	@ 0x30
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	0807ffff 	.word	0x0807ffff

080005e4 <Flash_Write_Byte>:
	}
	return FLASH_OK;
}

flash_status Flash_Write_Byte(uint32_t address, uint8_t *buffer, uint32_t size)
{
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
	flash_status status;
	uint32_t end_address = address + size;
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	61bb      	str	r3, [r7, #24]

	if (address < FLASH_START_ADDRESS || end_address > FLASH_END_ADDRESS)
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80005fe:	d303      	bcc.n	8000608 <Flash_Write_Byte+0x24>
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	4a1b      	ldr	r2, [pc, #108]	@ (8000670 <Flash_Write_Byte+0x8c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d901      	bls.n	800060c <Flash_Write_Byte+0x28>
		return FLASH_ERROR_INVALID_ADDRESS;
 8000608:	2305      	movs	r3, #5
 800060a:	e02c      	b.n	8000666 <Flash_Write_Byte+0x82>

	if (HAL_FLASH_Unlock() != HAL_OK)
 800060c:	f000 fe9c 	bl	8001348 <HAL_FLASH_Unlock>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <Flash_Write_Byte+0x36>
		return FLASH_ERROR_UNLOCK;
 8000616:	2304      	movs	r3, #4
 8000618:	e025      	b.n	8000666 <Flash_Write_Byte+0x82>

	for (uint32_t i = 0; i < size; i++)
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
 800061e:	e01b      	b.n	8000658 <Flash_Write_Byte+0x74>
	{
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address + i, buffer[i]);
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	18d1      	adds	r1, r2, r3
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2200      	movs	r2, #0
 8000632:	461c      	mov	r4, r3
 8000634:	4615      	mov	r5, r2
 8000636:	4622      	mov	r2, r4
 8000638:	462b      	mov	r3, r5
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fe32 	bl	80012a4 <HAL_FLASH_Program>
 8000640:	4603      	mov	r3, r0
 8000642:	75fb      	strb	r3, [r7, #23]
		if (status != FLASH_OK)
 8000644:	7dfb      	ldrb	r3, [r7, #23]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <Flash_Write_Byte+0x6e>
		{
			HAL_FLASH_Lock();
 800064a:	f000 fe9f 	bl	800138c <HAL_FLASH_Lock>
			return FLASH_WRITE_ERROR;
 800064e:	2302      	movs	r3, #2
 8000650:	e009      	b.n	8000666 <Flash_Write_Byte+0x82>
	for (uint32_t i = 0; i < size; i++)
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	3301      	adds	r3, #1
 8000656:	61fb      	str	r3, [r7, #28]
 8000658:	69fa      	ldr	r2, [r7, #28]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	429a      	cmp	r2, r3
 800065e:	d3df      	bcc.n	8000620 <Flash_Write_Byte+0x3c>
		}
	}
	HAL_FLASH_Lock();
 8000660:	f000 fe94 	bl	800138c <HAL_FLASH_Lock>
	return FLASH_OK;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bdb0      	pop	{r4, r5, r7, pc}
 800066e:	bf00      	nop
 8000670:	0807ffff 	.word	0x0807ffff

08000674 <Flash_Write_Word>:

flash_status Flash_Write_Word(uint32_t address, uint8_t *buffer, uint32_t size)
{
 8000674:	b5b0      	push	{r4, r5, r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
	flash_status status;
	uint32_t end_address = address + size;
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	61bb      	str	r3, [r7, #24]

	if (address < FLASH_START_ADDRESS || end_address > FLASH_END_ADDRESS)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800068e:	d303      	bcc.n	8000698 <Flash_Write_Word+0x24>
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	4a1b      	ldr	r2, [pc, #108]	@ (8000700 <Flash_Write_Word+0x8c>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d901      	bls.n	800069c <Flash_Write_Word+0x28>
		return FLASH_ERROR_INVALID_ADDRESS;
 8000698:	2305      	movs	r3, #5
 800069a:	e02d      	b.n	80006f8 <Flash_Write_Word+0x84>

	if (HAL_FLASH_Unlock() != HAL_OK)
 800069c:	f000 fe54 	bl	8001348 <HAL_FLASH_Unlock>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <Flash_Write_Word+0x36>
		return FLASH_ERROR_UNLOCK;
 80006a6:	2304      	movs	r3, #4
 80006a8:	e026      	b.n	80006f8 <Flash_Write_Word+0x84>

	for (uint32_t i = 0; i < size; i += 4)
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
 80006ae:	e01c      	b.n	80006ea <Flash_Write_Word+0x76>
	{
		uint32_t word = *(uint32_t *)(buffer + i);
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	4413      	add	r3, r2
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	617b      	str	r3, [r7, #20]
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, word);
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	18d1      	adds	r1, r2, r3
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	2200      	movs	r2, #0
 80006c4:	461c      	mov	r4, r3
 80006c6:	4615      	mov	r5, r2
 80006c8:	4622      	mov	r2, r4
 80006ca:	462b      	mov	r3, r5
 80006cc:	2002      	movs	r0, #2
 80006ce:	f000 fde9 	bl	80012a4 <HAL_FLASH_Program>
 80006d2:	4603      	mov	r3, r0
 80006d4:	74fb      	strb	r3, [r7, #19]
		if (status != FLASH_OK)
 80006d6:	7cfb      	ldrb	r3, [r7, #19]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d003      	beq.n	80006e4 <Flash_Write_Word+0x70>
		{
			HAL_FLASH_Lock();
 80006dc:	f000 fe56 	bl	800138c <HAL_FLASH_Lock>
			return FLASH_WRITE_ERROR;
 80006e0:	2302      	movs	r3, #2
 80006e2:	e009      	b.n	80006f8 <Flash_Write_Word+0x84>
	for (uint32_t i = 0; i < size; i += 4)
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	3304      	adds	r3, #4
 80006e8:	61fb      	str	r3, [r7, #28]
 80006ea:	69fa      	ldr	r2, [r7, #28]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d3de      	bcc.n	80006b0 <Flash_Write_Word+0x3c>
		}
	}
	HAL_FLASH_Lock();
 80006f2:	f000 fe4b 	bl	800138c <HAL_FLASH_Lock>
	return FLASH_OK;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000700:	0807ffff 	.word	0x0807ffff

08000704 <GetFlashSector>:
	}
	return FLASH_OK;
}

const FlashRegion_t* GetFlashSector(uint32_t address)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < FLASH_SECTOR_COUNT; i++)
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	e022      	b.n	8000758 <GetFlashSector+0x54>
    {
        if (address >= FlashSectors[i].start_addr && address <= FlashSectors[i].end_addr)
 8000712:	4916      	ldr	r1, [pc, #88]	@ (800076c <GetFlashSector+0x68>)
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	4613      	mov	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	4413      	add	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	440b      	add	r3, r1
 8000720:	3304      	adds	r3, #4
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	d313      	bcc.n	8000752 <GetFlashSector+0x4e>
 800072a:	4910      	ldr	r1, [pc, #64]	@ (800076c <GetFlashSector+0x68>)
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	4613      	mov	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	440b      	add	r3, r1
 8000738:	3308      	adds	r3, #8
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	d807      	bhi.n	8000752 <GetFlashSector+0x4e>
            return &FlashSectors[i];
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	4613      	mov	r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	4413      	add	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4a07      	ldr	r2, [pc, #28]	@ (800076c <GetFlashSector+0x68>)
 800074e:	4413      	add	r3, r2
 8000750:	e006      	b.n	8000760 <GetFlashSector+0x5c>
    for (uint32_t i = 0; i < FLASH_SECTOR_COUNT; i++)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3301      	adds	r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	2b07      	cmp	r3, #7
 800075c:	d9d9      	bls.n	8000712 <GetFlashSector+0xe>
    }
    return NULL;
 800075e:	2300      	movs	r3, #0
}
 8000760:	4618      	mov	r0, r3
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	08003014 	.word	0x08003014

08000770 <UART_Init>:
static const DRV_UART_HWInstance_EN DRV_UartInstances_arr[DRV_UART_MAX_INSTANCE] = {DRV_UART_HW_USART1,
																					DRV_UART_HW_USART2,
																					DRV_UART_HW_USART3};

UART_status UART_Init(DRV_UART_Instance_En uart_instance)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	switch(DRV_UartInstances_arr[uart_instance])
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	4a0b      	ldr	r2, [pc, #44]	@ (80007ac <UART_Init+0x3c>)
 800077e:	5cd3      	ldrb	r3, [r2, r3]
 8000780:	2b03      	cmp	r3, #3
 8000782:	d00a      	beq.n	800079a <UART_Init+0x2a>
 8000784:	2b03      	cmp	r3, #3
 8000786:	dc06      	bgt.n	8000796 <UART_Init+0x26>
 8000788:	2b01      	cmp	r3, #1
 800078a:	d008      	beq.n	800079e <UART_Init+0x2e>
 800078c:	2b02      	cmp	r3, #2
 800078e:	d102      	bne.n	8000796 <UART_Init+0x26>
		case DRV_UART_HW_USART1:
			//MX_USART1_UART_Init();
			break;

		case DRV_UART_HW_USART2:
			MX_USART2_UART_Init();
 8000790:	f000 f8f2 	bl	8000978 <MX_USART2_UART_Init>
			break;
 8000794:	e004      	b.n	80007a0 <UART_Init+0x30>
		case DRV_UART_HW_USART3:
			//MX_USART3_UART_Init();
			break;

		default:
			return UART_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e003      	b.n	80007a2 <UART_Init+0x32>
			break;
 800079a:	bf00      	nop
 800079c:	e000      	b.n	80007a0 <UART_Init+0x30>
			break;
 800079e:	bf00      	nop
	}
	return UART_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	080030b4 	.word	0x080030b4

080007b0 <UART_SendData>:

UART_status UART_SendData(DRV_UART_Instance_En uart_instance,uint8_t *data, uint32_t length)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	73fb      	strb	r3, [r7, #15]
	UART_status status;

	if(data == NULL || length == 0)
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d002      	beq.n	80007ca <UART_SendData+0x1a>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d101      	bne.n	80007ce <UART_SendData+0x1e>
		return UART_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e034      	b.n	8000838 <UART_SendData+0x88>

	switch(DRV_UartInstances_arr[uart_instance])
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000840 <UART_SendData+0x90>)
 80007d2:	5cd3      	ldrb	r3, [r2, r3]
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d01c      	beq.n	8000812 <UART_SendData+0x62>
 80007d8:	2b03      	cmp	r3, #3
 80007da:	dc25      	bgt.n	8000828 <UART_SendData+0x78>
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d002      	beq.n	80007e6 <UART_SendData+0x36>
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d00b      	beq.n	80007fc <UART_SendData+0x4c>
 80007e4:	e020      	b.n	8000828 <UART_SendData+0x78>
	{
	case DRV_UART_HW_USART1:
		status = HAL_UART_Transmit(&huart1,data,length,HAL_MAX_DELAY);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	68b9      	ldr	r1, [r7, #8]
 80007f0:	4814      	ldr	r0, [pc, #80]	@ (8000844 <UART_SendData+0x94>)
 80007f2:	f001 ff81 	bl	80026f8 <HAL_UART_Transmit>
 80007f6:	4603      	mov	r3, r0
 80007f8:	75fb      	strb	r3, [r7, #23]
		break;
 80007fa:	e017      	b.n	800082c <UART_SendData+0x7c>

	case DRV_UART_HW_USART2:
		status = HAL_UART_Transmit(&huart2,data,length,HAL_MAX_DELAY);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	f04f 33ff 	mov.w	r3, #4294967295
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	4810      	ldr	r0, [pc, #64]	@ (8000848 <UART_SendData+0x98>)
 8000808:	f001 ff76 	bl	80026f8 <HAL_UART_Transmit>
 800080c:	4603      	mov	r3, r0
 800080e:	75fb      	strb	r3, [r7, #23]
		break;
 8000810:	e00c      	b.n	800082c <UART_SendData+0x7c>

	case DRV_UART_HW_USART3:
		status = HAL_UART_Transmit(&huart3,data,length,HAL_MAX_DELAY);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	b29a      	uxth	r2, r3
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	68b9      	ldr	r1, [r7, #8]
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <UART_SendData+0x9c>)
 800081e:	f001 ff6b 	bl	80026f8 <HAL_UART_Transmit>
 8000822:	4603      	mov	r3, r0
 8000824:	75fb      	strb	r3, [r7, #23]
		break;
 8000826:	e001      	b.n	800082c <UART_SendData+0x7c>

	default:
		return UART_ERROR;
 8000828:	2301      	movs	r3, #1
 800082a:	e005      	b.n	8000838 <UART_SendData+0x88>
	}
	if(status != UART_OK)
 800082c:	7dfb      	ldrb	r3, [r7, #23]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <UART_SendData+0x86>
	{
		return UART_SENDING_ERROR;
 8000832:	2303      	movs	r3, #3
 8000834:	e000      	b.n	8000838 <UART_SendData+0x88>
	}
	return UART_OK;
 8000836:	2300      	movs	r3, #0
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	080030b4 	.word	0x080030b4
 8000844:	20000048 	.word	0x20000048
 8000848:	20000090 	.word	0x20000090
 800084c:	200000d8 	.word	0x200000d8

08000850 <UART_ReceiveDataBlocking>:

UART_status UART_ReceiveDataBlocking(DRV_UART_Instance_En uart_instance,uint8_t *data, uint32_t length)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
 800085c:	73fb      	strb	r3, [r7, #15]
	UART_status status;

	switch(DRV_UartInstances_arr[uart_instance])
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	4a1b      	ldr	r2, [pc, #108]	@ (80008d0 <UART_ReceiveDataBlocking+0x80>)
 8000862:	5cd3      	ldrb	r3, [r2, r3]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d01c      	beq.n	80008a2 <UART_ReceiveDataBlocking+0x52>
 8000868:	2b03      	cmp	r3, #3
 800086a:	dc25      	bgt.n	80008b8 <UART_ReceiveDataBlocking+0x68>
 800086c:	2b01      	cmp	r3, #1
 800086e:	d002      	beq.n	8000876 <UART_ReceiveDataBlocking+0x26>
 8000870:	2b02      	cmp	r3, #2
 8000872:	d00b      	beq.n	800088c <UART_ReceiveDataBlocking+0x3c>
 8000874:	e020      	b.n	80008b8 <UART_ReceiveDataBlocking+0x68>
	{
		case DRV_UART_HW_USART1:
			status = HAL_UART_Receive(&huart1,data,length,HAL_MAX_DELAY);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	b29a      	uxth	r2, r3
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	68b9      	ldr	r1, [r7, #8]
 8000880:	4814      	ldr	r0, [pc, #80]	@ (80008d4 <UART_ReceiveDataBlocking+0x84>)
 8000882:	f001 ffc4 	bl	800280e <HAL_UART_Receive>
 8000886:	4603      	mov	r3, r0
 8000888:	75fb      	strb	r3, [r7, #23]
			break;
 800088a:	e017      	b.n	80008bc <UART_ReceiveDataBlocking+0x6c>

		case DRV_UART_HW_USART2:
			status = HAL_UART_Receive(&huart2,data,length,HAL_MAX_DELAY);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	b29a      	uxth	r2, r3
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	4810      	ldr	r0, [pc, #64]	@ (80008d8 <UART_ReceiveDataBlocking+0x88>)
 8000898:	f001 ffb9 	bl	800280e <HAL_UART_Receive>
 800089c:	4603      	mov	r3, r0
 800089e:	75fb      	strb	r3, [r7, #23]
			break;
 80008a0:	e00c      	b.n	80008bc <UART_ReceiveDataBlocking+0x6c>

		case DRV_UART_HW_USART3:
			status = HAL_UART_Receive(&huart3,data,length,HAL_MAX_DELAY);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	68b9      	ldr	r1, [r7, #8]
 80008ac:	480b      	ldr	r0, [pc, #44]	@ (80008dc <UART_ReceiveDataBlocking+0x8c>)
 80008ae:	f001 ffae 	bl	800280e <HAL_UART_Receive>
 80008b2:	4603      	mov	r3, r0
 80008b4:	75fb      	strb	r3, [r7, #23]
			break;
 80008b6:	e001      	b.n	80008bc <UART_ReceiveDataBlocking+0x6c>

		default:
			return UART_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e005      	b.n	80008c8 <UART_ReceiveDataBlocking+0x78>
	}

	if(status != UART_OK)
 80008bc:	7dfb      	ldrb	r3, [r7, #23]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <UART_ReceiveDataBlocking+0x76>
	{
		return UART_RECEVING_ERROR;
 80008c2:	2302      	movs	r3, #2
 80008c4:	e000      	b.n	80008c8 <UART_ReceiveDataBlocking+0x78>
	}
	return UART_OK;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	080030b4 	.word	0x080030b4
 80008d4:	20000048 	.word	0x20000048
 80008d8:	20000090 	.word	0x20000090
 80008dc:	200000d8 	.word	0x200000d8

080008e0 <UART_ReceiveData>:

UART_status UART_ReceiveData(DRV_UART_Instance_En uart_instance,uint8_t *data, uint32_t length,uint32_t TIMEOUT)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4603      	mov	r3, r0
 80008ee:	73fb      	strb	r3, [r7, #15]
	UART_status status;

	switch(DRV_UartInstances_arr[uart_instance])
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	4a1a      	ldr	r2, [pc, #104]	@ (800095c <UART_ReceiveData+0x7c>)
 80008f4:	5cd3      	ldrb	r3, [r2, r3]
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d01a      	beq.n	8000930 <UART_ReceiveData+0x50>
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	dc22      	bgt.n	8000944 <UART_ReceiveData+0x64>
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d002      	beq.n	8000908 <UART_ReceiveData+0x28>
 8000902:	2b02      	cmp	r3, #2
 8000904:	d00a      	beq.n	800091c <UART_ReceiveData+0x3c>
 8000906:	e01d      	b.n	8000944 <UART_ReceiveData+0x64>
	{
		case DRV_UART_HW_USART1:
			status = HAL_UART_Receive(&huart1,data,length,TIMEOUT);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	b29a      	uxth	r2, r3
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68b9      	ldr	r1, [r7, #8]
 8000910:	4813      	ldr	r0, [pc, #76]	@ (8000960 <UART_ReceiveData+0x80>)
 8000912:	f001 ff7c 	bl	800280e <HAL_UART_Receive>
 8000916:	4603      	mov	r3, r0
 8000918:	75fb      	strb	r3, [r7, #23]
			break;
 800091a:	e015      	b.n	8000948 <UART_ReceiveData+0x68>

		case DRV_UART_HW_USART2:
			status = HAL_UART_Receive(&huart2,data,length,TIMEOUT);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	b29a      	uxth	r2, r3
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68b9      	ldr	r1, [r7, #8]
 8000924:	480f      	ldr	r0, [pc, #60]	@ (8000964 <UART_ReceiveData+0x84>)
 8000926:	f001 ff72 	bl	800280e <HAL_UART_Receive>
 800092a:	4603      	mov	r3, r0
 800092c:	75fb      	strb	r3, [r7, #23]
			break;
 800092e:	e00b      	b.n	8000948 <UART_ReceiveData+0x68>

		case DRV_UART_HW_USART3:
			status = HAL_UART_Receive(&huart3,data,length,TIMEOUT);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	b29a      	uxth	r2, r3
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68b9      	ldr	r1, [r7, #8]
 8000938:	480b      	ldr	r0, [pc, #44]	@ (8000968 <UART_ReceiveData+0x88>)
 800093a:	f001 ff68 	bl	800280e <HAL_UART_Receive>
 800093e:	4603      	mov	r3, r0
 8000940:	75fb      	strb	r3, [r7, #23]
			break;
 8000942:	e001      	b.n	8000948 <UART_ReceiveData+0x68>

		default:
			return UART_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	e005      	b.n	8000954 <UART_ReceiveData+0x74>
	}
	if(status != UART_OK)
 8000948:	7dfb      	ldrb	r3, [r7, #23]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <UART_ReceiveData+0x72>
	{
		return UART_RECEVING_ERROR;
 800094e:	2302      	movs	r3, #2
 8000950:	e000      	b.n	8000954 <UART_ReceiveData+0x74>
	}
	return UART_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	080030b4 	.word	0x080030b4
 8000960:	20000048 	.word	0x20000048
 8000964:	20000090 	.word	0x20000090
 8000968:	200000d8 	.word	0x200000d8

0800096c <Error_Handler>:

void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  __disable_irq();
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <Error_Handler+0x8>

08000978 <MX_USART2_UART_Init>:
  {
  }
}

static void MX_USART2_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <MX_USART2_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 80009b0:	f001 fe52 	bl	8002658 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f7ff ffd7 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000090 	.word	0x20000090
 80009c8:	40004400 	.word	0x40004400

080009cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80009d0:	f3bf 8f4f 	dsb	sy
}
 80009d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <__NVIC_SystemReset+0x24>)
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80009de:	4904      	ldr	r1, [pc, #16]	@ (80009f0 <__NVIC_SystemReset+0x24>)
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <__NVIC_SystemReset+0x28>)
 80009e2:	4313      	orrs	r3, r2
 80009e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80009e6:	f3bf 8f4f 	dsb	sy
}
 80009ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <__NVIC_SystemReset+0x20>
 80009f0:	e000ed00 	.word	0xe000ed00
 80009f4:	05fa0004 	.word	0x05fa0004

080009f8 <main>:

uint32_t bytes_written;
uint8_t cmd;

int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  HAL_Init();
 80009fc:	f000 fad6 	bl	8000fac <HAL_Init>
  SystemClock_Config();
 8000a00:	f000 f994 	bl	8000d2c <SystemClock_Config>
  UART_Init(DRV_UART_INSTANCE_2);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff feb3 	bl	8000770 <UART_Init>

  if(check_boot_flag() != BOOT_FLAG_VALUE && Read_app_status() == APP_STATUS_OK)
 8000a0a:	f000 f983 	bl	8000d14 <check_boot_flag>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a06      	ldr	r2, [pc, #24]	@ (8000a2c <main+0x34>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d006      	beq.n	8000a24 <main+0x2c>
 8000a16:	f000 f8eb 	bl	8000bf0 <Read_app_status>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d101      	bne.n	8000a24 <main+0x2c>
  {
	  JumpToUserApp();
 8000a20:	f000 f806 	bl	8000a30 <JumpToUserApp>
  }
  JumpToBootloader();
 8000a24:	f000 f822 	bl	8000a6c <JumpToBootloader>

  while(1);
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <main+0x30>
 8000a2c:	abcdabcd 	.word	0xabcdabcd

08000a30 <JumpToUserApp>:
}

void JumpToUserApp(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
		uint32_t mspValue = *(volatile uint32_t *)FLASH_UserApp_ADDRESS;
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <JumpToUserApp+0x30>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f383 8808 	msr	MSP, r3
}
 8000a46:	bf00      	nop
		__set_MSP(mspValue);

		SCB->VTOR = FLASH_UserApp_ADDRESS;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <JumpToUserApp+0x34>)
 8000a4a:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <JumpToUserApp+0x30>)
 8000a4c:	609a      	str	r2, [r3, #8]

		void (*app_reset_handler)(void) = (void *)(*((volatile uint32_t *)(FLASH_UserApp_ADDRESS + 4U)));
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <JumpToUserApp+0x38>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	60bb      	str	r3, [r7, #8]
		app_reset_handler();
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4798      	blx	r3
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	08008000 	.word	0x08008000
 8000a64:	e000ed00 	.word	0xe000ed00
 8000a68:	08008004 	.word	0x08008004

08000a6c <JumpToBootloader>:

void JumpToBootloader(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	uint32_t Py_CRC=0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
	while(1)
	{
		UART_ReceiveDataBlocking(DRV_UART_INSTANCE_2,&cmd,sizeof(cmd));
 8000a76:	2201      	movs	r2, #1
 8000a78:	4914      	ldr	r1, [pc, #80]	@ (8000acc <JumpToBootloader+0x60>)
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f7ff fee8 	bl	8000850 <UART_ReceiveDataBlocking>
		if(cmd == FLASH_WRITE_COMMAND)
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <JumpToBootloader+0x60>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b31      	cmp	r3, #49	@ 0x31
 8000a86:	d1f6      	bne.n	8000a76 <JumpToBootloader+0xa>
		{
			Flash_Sector_Erase(FLASH_UserApp_ADDRESS,USER_APP_SIZE);
 8000a88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a8c:	4810      	ldr	r0, [pc, #64]	@ (8000ad0 <JumpToBootloader+0x64>)
 8000a8e:	f7ff fd4f 	bl	8000530 <Flash_Sector_Erase>
			update_data(0x00);
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 f8bc 	bl	8000c10 <update_data>
			if(bootloader_handle_FlashWrite() != HAL_OK)
 8000a98:	f000 f81c 	bl	8000ad4 <bootloader_handle_FlashWrite>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <JumpToBootloader+0x3a>
			{
				NVIC_SystemReset();
 8000aa2:	f7ff ff93 	bl	80009cc <__NVIC_SystemReset>
			}
			UART_ReceiveDataBlocking(DRV_UART_INSTANCE_2,(uint8_t*)&Py_CRC,sizeof(Py_CRC));
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fecf 	bl	8000850 <UART_ReceiveDataBlocking>
			uint32_t crc = crc32_flash();
 8000ab2:	f000 f91b 	bl	8000cec <crc32_flash>
 8000ab6:	6078      	str	r0, [r7, #4]
			if(crc == Py_CRC)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d1da      	bne.n	8000a76 <JumpToBootloader+0xa>
			{
				update_data(0x01);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f000 f8a5 	bl	8000c10 <update_data>
				NVIC_SystemReset();
 8000ac6:	f7ff ff81 	bl	80009cc <__NVIC_SystemReset>
 8000aca:	bf00      	nop
 8000acc:	20000124 	.word	0x20000124
 8000ad0:	08008000 	.word	0x08008000

08000ad4 <bootloader_handle_FlashWrite>:
		}
	}
}

HAL_StatusTypeDef bootloader_handle_FlashWrite(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
	uint8_t rx_buf[4];
	HAL_Delay(1000);
 8000ada:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ade:	f000 fad7 	bl	8001090 <HAL_Delay>
	UART_SendData(DRV_UART_INSTANCE_2,(uint8_t *)"OK\r\n",3);
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	4911      	ldr	r1, [pc, #68]	@ (8000b2c <bootloader_handle_FlashWrite+0x58>)
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff fe62 	bl	80007b0 <UART_SendData>
	UART_ReceiveDataBlocking(DRV_UART_INSTANCE_2,rx_buf, 4);
 8000aec:	463b      	mov	r3, r7
 8000aee:	2204      	movs	r2, #4
 8000af0:	4619      	mov	r1, r3
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff feac 	bl	8000850 <UART_ReceiveDataBlocking>
	uint32_t filesize = (rx_buf[0]) | (rx_buf[1] << 8) | (rx_buf[2] << 16) | (rx_buf[3] << 24);
 8000af8:	783b      	ldrb	r3, [r7, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	787b      	ldrb	r3, [r7, #1]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	431a      	orrs	r2, r3
 8000b02:	78bb      	ldrb	r3, [r7, #2]
 8000b04:	041b      	lsls	r3, r3, #16
 8000b06:	431a      	orrs	r2, r3
 8000b08:	78fb      	ldrb	r3, [r7, #3]
 8000b0a:	061b      	lsls	r3, r3, #24
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	607b      	str	r3, [r7, #4]
	if(Flash_Write_Binary(filesize) != HAL_OK)
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 f80d 	bl	8000b30 <Flash_Write_Binary>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <bootloader_handle_FlashWrite+0x4c>
	{
		return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e000      	b.n	8000b22 <bootloader_handle_FlashWrite+0x4e>
	}
	return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	0800300c 	.word	0x0800300c

08000b30 <Flash_Write_Binary>:

HAL_StatusTypeDef Flash_Write_Binary(uint32_t filesize)
{
 8000b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b34:	b087      	sub	sp, #28
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
 8000b3a:	466b      	mov	r3, sp
 8000b3c:	461e      	mov	r6, r3
    uint32_t flash_addr = FLASH_UserApp_ADDRESS;
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <Flash_Write_Binary+0xb8>)
 8000b40:	617b      	str	r3, [r7, #20]
    uint32_t chunk = 256;
 8000b42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b46:	613b      	str	r3, [r7, #16]
    uint8_t rx_buf[chunk];
 8000b48:	6939      	ldr	r1, [r7, #16]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	2300      	movs	r3, #0
 8000b52:	4688      	mov	r8, r1
 8000b54:	4699      	mov	r9, r3
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	f04f 0300 	mov.w	r3, #0
 8000b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	461d      	mov	r5, r3
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	00eb      	lsls	r3, r5, #3
 8000b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b7e:	00e2      	lsls	r2, r4, #3
 8000b80:	1dcb      	adds	r3, r1, #7
 8000b82:	08db      	lsrs	r3, r3, #3
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	ebad 0d03 	sub.w	sp, sp, r3
 8000b8a:	466b      	mov	r3, sp
 8000b8c:	3300      	adds	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
    bytes_written = 0;
 8000b90:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <Flash_Write_Binary+0xbc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
    while(bytes_written < filesize)
 8000b96:	e01a      	b.n	8000bce <Flash_Write_Binary+0x9e>
    {
        if (UART_ReceiveData(DRV_UART_INSTANCE_2,rx_buf, chunk,3000) != UART_OK)
 8000b98:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	68b9      	ldr	r1, [r7, #8]
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f7ff fe9d 	bl	80008e0 <UART_ReceiveData>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <Flash_Write_Binary+0x80>
        {
            return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	e014      	b.n	8000bda <Flash_Write_Binary+0xaa>
        }
        Flash_Write_Byte(flash_addr, rx_buf,chunk);
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	68b9      	ldr	r1, [r7, #8]
 8000bb4:	6978      	ldr	r0, [r7, #20]
 8000bb6:	f7ff fd15 	bl	80005e4 <Flash_Write_Byte>
        flash_addr += chunk;
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	617b      	str	r3, [r7, #20]
        bytes_written += chunk;
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <Flash_Write_Binary+0xbc>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a08      	ldr	r2, [pc, #32]	@ (8000bec <Flash_Write_Binary+0xbc>)
 8000bcc:	6013      	str	r3, [r2, #0]
    while(bytes_written < filesize)
 8000bce:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <Flash_Write_Binary+0xbc>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d8df      	bhi.n	8000b98 <Flash_Write_Binary+0x68>
    }
    return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	46b5      	mov	sp, r6
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	371c      	adds	r7, #28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000be6:	bf00      	nop
 8000be8:	08008000 	.word	0x08008000
 8000bec:	20000120 	.word	0x20000120

08000bf0 <Read_app_status>:

uint8_t Read_app_status(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
    uint8_t status;
    status = *(uint8_t *)MetaDataAddress;
 8000bf6:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <Read_app_status+0x1c>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
    return status;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	08070004 	.word	0x08070004

08000c10 <update_data>:

HAL_StatusTypeDef update_data(uint8_t app_status)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	uint32_t Address = MetaDataAddress;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <update_data+0x58>)
 8000c1c:	60bb      	str	r3, [r7, #8]

	Flash_Sector_Erase((uint32_t)BOOT_FLAG_ADDRESS,(16*1024));
 8000c1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c22:	4812      	ldr	r0, [pc, #72]	@ (8000c6c <update_data+0x5c>)
 8000c24:	f7ff fc84 	bl	8000530 <Flash_Sector_Erase>

	status = Flash_Write_Byte(MetaDataAddress, &app_status, sizeof(app_status));
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480e      	ldr	r0, [pc, #56]	@ (8000c68 <update_data+0x58>)
 8000c30:	f7ff fcd8 	bl	80005e4 <Flash_Write_Byte>
 8000c34:	4603      	mov	r3, r0
 8000c36:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) goto end;
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10b      	bne.n	8000c56 <update_data+0x46>

	status = Flash_Write_Word(Address + 4, (uint8_t *)&bytes_written, sizeof(bytes_written));
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2204      	movs	r2, #4
 8000c44:	490a      	ldr	r1, [pc, #40]	@ (8000c70 <update_data+0x60>)
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fd14 	bl	8000674 <Flash_Write_Word>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) goto end;
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	2b00      	cmp	r3, #0

end:
 8000c54:	e000      	b.n	8000c58 <update_data+0x48>
	if (status != HAL_OK) goto end;
 8000c56:	bf00      	nop
	HAL_FLASH_Lock();
 8000c58:	f000 fb98 	bl	800138c <HAL_FLASH_Lock>
	return status;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	08070004 	.word	0x08070004
 8000c6c:	08070000 	.word	0x08070000
 8000c70:	20000120 	.word	0x20000120

08000c74 <crc32_calculate>:

uint32_t crc32_calculate(uint8_t* data, uint32_t length)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	617b      	str	r3, [r7, #20]
    uint32_t poly = 0x04C11DB7;
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <crc32_calculate+0x74>)
 8000c86:	60bb      	str	r3, [r7, #8]

    for (uint32_t i = 0; i < length; i++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	e01f      	b.n	8000cce <crc32_calculate+0x5a>
    {
        crc ^= ((uint32_t)data[i]) << 24;
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	4413      	add	r3, r2
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	061b      	lsls	r3, r3, #24
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	4053      	eors	r3, r2
 8000c9c:	617b      	str	r3, [r7, #20]
        for (uint8_t bit = 0; bit < 8; bit++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	73fb      	strb	r3, [r7, #15]
 8000ca2:	e00e      	b.n	8000cc2 <crc32_calculate+0x4e>
        {
            if (crc & 0x80000000)
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	da05      	bge.n	8000cb6 <crc32_calculate+0x42>
                crc = (crc << 1) ^ poly;
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	4053      	eors	r3, r2
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e002      	b.n	8000cbc <crc32_calculate+0x48>
            else
                crc <<= 1;
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
        for (uint8_t bit = 0; bit < 8; bit++)
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	d9ed      	bls.n	8000ca4 <crc32_calculate+0x30>
    for (uint32_t i = 0; i < length; i++)
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d3db      	bcc.n	8000c8e <crc32_calculate+0x1a>
        }
    }
    return crc ^ 0xFFFFFFFF;
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	43db      	mvns	r3, r3
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	371c      	adds	r7, #28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	04c11db7 	.word	0x04c11db7

08000cec <crc32_flash>:

uint32_t crc32_flash()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
    uint8_t* ptr = (uint8_t*)FLASH_UserApp_ADDRESS;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <crc32_flash+0x20>)
 8000cf4:	607b      	str	r3, [r7, #4]
    return crc32_calculate(ptr, bytes_written);
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <crc32_flash+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ffb9 	bl	8000c74 <crc32_calculate>
 8000d02:	4603      	mov	r3, r0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	08008000 	.word	0x08008000
 8000d10:	20000120 	.word	0x20000120

08000d14 <check_boot_flag>:

uint32_t check_boot_flag(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
    return *(volatile uint32_t*)BOOT_FLAG_ADDRESS;
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <check_boot_flag+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	08070000 	.word	0x08070000

08000d2c <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b094      	sub	sp, #80	@ 0x50
 8000d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	2234      	movs	r2, #52	@ 0x34
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 f92e 	bl	8002f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	4b25      	ldr	r3, [pc, #148]	@ (8000dec <SystemClock_Config+0xc0>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d58:	4a24      	ldr	r2, [pc, #144]	@ (8000dec <SystemClock_Config+0xc0>)
 8000d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d60:	4b22      	ldr	r3, [pc, #136]	@ (8000dec <SystemClock_Config+0xc0>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <SystemClock_Config+0xc4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d78:	4a1d      	ldr	r2, [pc, #116]	@ (8000df0 <SystemClock_Config+0xc4>)
 8000d7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <SystemClock_Config+0xc4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d94:	2301      	movs	r3, #1
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d98:	2310      	movs	r3, #16
 8000d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4618      	mov	r0, r3
 8000daa:	f001 f9b7 	bl	800211c <HAL_RCC_OscConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000db4:	f7ff fdda 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db8:	230f      	movs	r3, #15
 8000dba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 fede 	bl	8001b94 <HAL_RCC_ClockConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000dde:	f7ff fdc5 	bl	800096c <Error_Handler>
  }
}
 8000de2:	bf00      	nop
 8000de4:	3750      	adds	r7, #80	@ 0x50
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40007000 	.word	0x40007000

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	4a0f      	ldr	r2, [pc, #60]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_MspInit+0x4c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	@ 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	@ (8000ec8 <HAL_UART_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12b      	bne.n	8000ebe <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_UART_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <HAL_UART_MspInit+0x8c>)
 8000eba:	f000 fcd7 	bl	800186c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	@ 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40004400 	.word	0x40004400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <NMI_Handler+0x4>

08000edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2a:	f000 f891 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f5c:	f7ff ffea 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f60:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f62:	490d      	ldr	r1, [pc, #52]	@ (8000f98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f64:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f78:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f002 f811 	bl	8002fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fd35 	bl	80009f8 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000f9c:	080030e0 	.word	0x080030e0
  ldr r2, =_sbss
 8000fa0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000fa4:	2000012c 	.word	0x2000012c

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	@ (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f931 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff ff08 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f93b 	bl	800128a <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f000 f911 	bl	8001252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	@ (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000000 	.word	0x20000000
 8001048:	20000008 	.word	0x20000008
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	20000128 	.word	0x20000128

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000128 	.word	0x20000128

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <HAL_Delay+0x44>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffde 	bl	8001078 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008

080010d8 <__NVIC_SetPriorityGrouping>:
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_SetPriority>:
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	@ (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	@ (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	@ 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff8e 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff47 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff5c 	bl	8001120 <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff8e 	bl	8001190 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5d 	bl	800113c <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffb0 	bl	80011f8 <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012b2:	4b23      	ldr	r3, [pc, #140]	@ (8001340 <HAL_FLASH_Program+0x9c>)
 80012b4:	7e1b      	ldrb	r3, [r3, #24]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_FLASH_Program+0x1a>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e03b      	b.n	8001336 <HAL_FLASH_Program+0x92>
 80012be:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <HAL_FLASH_Program+0x9c>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012c4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80012c8:	f000 f870 	bl	80013ac <FLASH_WaitForLastOperation>
 80012cc:	4603      	mov	r3, r0
 80012ce:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d12b      	bne.n	800132e <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d105      	bne.n	80012e8 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80012dc:	783b      	ldrb	r3, [r7, #0]
 80012de:	4619      	mov	r1, r3
 80012e0:	68b8      	ldr	r0, [r7, #8]
 80012e2:	f000 f91b 	bl	800151c <FLASH_Program_Byte>
 80012e6:	e016      	b.n	8001316 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80012ee:	883b      	ldrh	r3, [r7, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	68b8      	ldr	r0, [r7, #8]
 80012f4:	f000 f8ee 	bl	80014d4 <FLASH_Program_HalfWord>
 80012f8:	e00d      	b.n	8001316 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d105      	bne.n	800130c <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	68b8      	ldr	r0, [r7, #8]
 8001306:	f000 f8c3 	bl	8001490 <FLASH_Program_Word>
 800130a:	e004      	b.n	8001316 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800130c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001310:	68b8      	ldr	r0, [r7, #8]
 8001312:	f000 f88b 	bl	800142c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001316:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800131a:	f000 f847 	bl	80013ac <FLASH_WaitForLastOperation>
 800131e:	4603      	mov	r3, r0
 8001320:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <HAL_FLASH_Program+0xa0>)
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <HAL_FLASH_Program+0xa0>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800132e:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <HAL_FLASH_Program+0x9c>)
 8001330:	2200      	movs	r2, #0
 8001332:	761a      	strb	r2, [r3, #24]

  return status;
 8001334:	7dfb      	ldrb	r3, [r7, #23]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000000c 	.word	0x2000000c
 8001344:	40023c00 	.word	0x40023c00

08001348 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001352:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <HAL_FLASH_Unlock+0x38>)
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	da0b      	bge.n	8001372 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <HAL_FLASH_Unlock+0x38>)
 800135c:	4a09      	ldr	r2, [pc, #36]	@ (8001384 <HAL_FLASH_Unlock+0x3c>)
 800135e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <HAL_FLASH_Unlock+0x38>)
 8001362:	4a09      	ldr	r2, [pc, #36]	@ (8001388 <HAL_FLASH_Unlock+0x40>)
 8001364:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <HAL_FLASH_Unlock+0x38>)
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	2b00      	cmp	r3, #0
 800136c:	da01      	bge.n	8001372 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001372:	79fb      	ldrb	r3, [r7, #7]
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40023c00 	.word	0x40023c00
 8001384:	45670123 	.word	0x45670123
 8001388:	cdef89ab 	.word	0xcdef89ab

0800138c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001390:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <HAL_FLASH_Lock+0x1c>)
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <HAL_FLASH_Lock+0x1c>)
 8001396:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800139a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	40023c00 	.word	0x40023c00

080013ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <FLASH_WaitForLastOperation+0x78>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80013be:	f7ff fe5b 	bl	8001078 <HAL_GetTick>
 80013c2:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80013c4:	e010      	b.n	80013e8 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d00c      	beq.n	80013e8 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d007      	beq.n	80013e4 <FLASH_WaitForLastOperation+0x38>
 80013d4:	f7ff fe50 	bl	8001078 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d201      	bcs.n	80013e8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e019      	b.n	800141c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80013e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <FLASH_WaitForLastOperation+0x7c>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e8      	bne.n	80013c6 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <FLASH_WaitForLastOperation+0x7c>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001400:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <FLASH_WaitForLastOperation+0x7c>)
 8001402:	2201      	movs	r2, #1
 8001404:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001406:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <FLASH_WaitForLastOperation+0x7c>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001412:	f000 f8a5 	bl	8001560 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0

}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000000c 	.word	0x2000000c
 8001428:	40023c00 	.word	0x40023c00

0800142c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <FLASH_Program_DoubleWord+0x60>)
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	4a13      	ldr	r2, [pc, #76]	@ (800148c <FLASH_Program_DoubleWord+0x60>)
 800143e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001442:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <FLASH_Program_DoubleWord+0x60>)
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	4a10      	ldr	r2, [pc, #64]	@ (800148c <FLASH_Program_DoubleWord+0x60>)
 800144a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800144e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001450:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <FLASH_Program_DoubleWord+0x60>)
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <FLASH_Program_DoubleWord+0x60>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001462:	f3bf 8f6f 	isb	sy
}
 8001466:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001468:	e9d7 0100 	ldrd	r0, r1, [r7]
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	000a      	movs	r2, r1
 8001476:	2300      	movs	r3, #0
 8001478:	68f9      	ldr	r1, [r7, #12]
 800147a:	3104      	adds	r1, #4
 800147c:	4613      	mov	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40023c00 	.word	0x40023c00

08001490 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <FLASH_Program_Word+0x40>)
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	4a0c      	ldr	r2, [pc, #48]	@ (80014d0 <FLASH_Program_Word+0x40>)
 80014a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80014a6:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <FLASH_Program_Word+0x40>)
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	4a09      	ldr	r2, [pc, #36]	@ (80014d0 <FLASH_Program_Word+0x40>)
 80014ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014b2:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <FLASH_Program_Word+0x40>)
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	4a06      	ldr	r2, [pc, #24]	@ (80014d0 <FLASH_Program_Word+0x40>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	601a      	str	r2, [r3, #0]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40023c00 	.word	0x40023c00

080014d4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <FLASH_Program_HalfWord+0x44>)
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001518 <FLASH_Program_HalfWord+0x44>)
 80014e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <FLASH_Program_HalfWord+0x44>)
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	4a09      	ldr	r2, [pc, #36]	@ (8001518 <FLASH_Program_HalfWord+0x44>)
 80014f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014f8:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <FLASH_Program_HalfWord+0x44>)
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	4a06      	ldr	r2, [pc, #24]	@ (8001518 <FLASH_Program_HalfWord+0x44>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	801a      	strh	r2, [r3, #0]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023c00 	.word	0x40023c00

0800151c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <FLASH_Program_Byte+0x40>)
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	4a0b      	ldr	r2, [pc, #44]	@ (800155c <FLASH_Program_Byte+0x40>)
 800152e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001532:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001534:	4b09      	ldr	r3, [pc, #36]	@ (800155c <FLASH_Program_Byte+0x40>)
 8001536:	4a09      	ldr	r2, [pc, #36]	@ (800155c <FLASH_Program_Byte+0x40>)
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800153c:	4b07      	ldr	r3, [pc, #28]	@ (800155c <FLASH_Program_Byte+0x40>)
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	4a06      	ldr	r2, [pc, #24]	@ (800155c <FLASH_Program_Byte+0x40>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	78fa      	ldrb	r2, [r7, #3]
 800154c:	701a      	strb	r2, [r3, #0]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40023c00 	.word	0x40023c00

08001560 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001564:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <FLASH_SetErrorCode+0xc4>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001570:	4b2d      	ldr	r3, [pc, #180]	@ (8001628 <FLASH_SetErrorCode+0xc8>)
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	f043 0310 	orr.w	r3, r3, #16
 8001578:	4a2b      	ldr	r2, [pc, #172]	@ (8001628 <FLASH_SetErrorCode+0xc8>)
 800157a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800157c:	4b29      	ldr	r3, [pc, #164]	@ (8001624 <FLASH_SetErrorCode+0xc4>)
 800157e:	2210      	movs	r2, #16
 8001580:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001582:	4b28      	ldr	r3, [pc, #160]	@ (8001624 <FLASH_SetErrorCode+0xc4>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f003 0320 	and.w	r3, r3, #32
 800158a:	2b00      	cmp	r3, #0
 800158c:	d008      	beq.n	80015a0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800158e:	4b26      	ldr	r3, [pc, #152]	@ (8001628 <FLASH_SetErrorCode+0xc8>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	4a24      	ldr	r2, [pc, #144]	@ (8001628 <FLASH_SetErrorCode+0xc8>)
 8001598:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800159a:	4b22      	ldr	r3, [pc, #136]	@ (8001624 <FLASH_SetErrorCode+0xc4>)
 800159c:	2220      	movs	r2, #32
 800159e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80015a0:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <FLASH_SetErrorCode+0xc4>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80015ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <FLASH_SetErrorCode+0xc8>)
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <FLASH_SetErrorCode+0xc8>)
 80015b6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80015b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <FLASH_SetErrorCode+0xc4>)
 80015ba:	2240      	movs	r2, #64	@ 0x40
 80015bc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80015be:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <FLASH_SetErrorCode+0xc4>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80015ca:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <FLASH_SetErrorCode+0xc8>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	4a15      	ldr	r2, [pc, #84]	@ (8001628 <FLASH_SetErrorCode+0xc8>)
 80015d4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80015d6:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <FLASH_SetErrorCode+0xc4>)
 80015d8:	2280      	movs	r2, #128	@ 0x80
 80015da:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <FLASH_SetErrorCode+0xc4>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d009      	beq.n	80015fc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <FLASH_SetErrorCode+0xc8>)
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001628 <FLASH_SetErrorCode+0xc8>)
 80015f2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <FLASH_SetErrorCode+0xc4>)
 80015f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015fa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <FLASH_SetErrorCode+0xc4>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001608:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <FLASH_SetErrorCode+0xc8>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	f043 0320 	orr.w	r3, r3, #32
 8001610:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <FLASH_SetErrorCode+0xc8>)
 8001612:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001614:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <FLASH_SetErrorCode+0xc4>)
 8001616:	2202      	movs	r2, #2
 8001618:	60da      	str	r2, [r3, #12]
  }
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40023c00 	.word	0x40023c00
 8001628:	2000000c 	.word	0x2000000c

0800162c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <HAL_FLASHEx_Erase+0xd4>)
 800163c:	7e1b      	ldrb	r3, [r3, #24]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_FLASHEx_Erase+0x1a>
 8001642:	2302      	movs	r3, #2
 8001644:	e058      	b.n	80016f8 <HAL_FLASHEx_Erase+0xcc>
 8001646:	4b2e      	ldr	r3, [pc, #184]	@ (8001700 <HAL_FLASHEx_Erase+0xd4>)
 8001648:	2201      	movs	r2, #1
 800164a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800164c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001650:	f7ff feac 	bl	80013ac <FLASH_WaitForLastOperation>
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d148      	bne.n	80016f0 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d115      	bne.n	800169a <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4619      	mov	r1, r3
 800167a:	4610      	mov	r0, r2
 800167c:	f000 f844 	bl	8001708 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001680:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001684:	f7ff fe92 	bl	80013ac <FLASH_WaitForLastOperation>
 8001688:	4603      	mov	r3, r0
 800168a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800168c:	4b1d      	ldr	r3, [pc, #116]	@ (8001704 <HAL_FLASHEx_Erase+0xd8>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	4a1c      	ldr	r2, [pc, #112]	@ (8001704 <HAL_FLASHEx_Erase+0xd8>)
 8001692:	f023 0304 	bic.w	r3, r3, #4
 8001696:	6113      	str	r3, [r2, #16]
 8001698:	e028      	b.n	80016ec <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	e01c      	b.n	80016dc <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4619      	mov	r1, r3
 80016aa:	68b8      	ldr	r0, [r7, #8]
 80016ac:	f000 f850 	bl	8001750 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016b0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80016b4:	f7ff fe7a 	bl	80013ac <FLASH_WaitForLastOperation>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <HAL_FLASHEx_Erase+0xd8>)
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	4a10      	ldr	r2, [pc, #64]	@ (8001704 <HAL_FLASHEx_Erase+0xd8>)
 80016c2:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80016c6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	601a      	str	r2, [r3, #0]
          break;
 80016d4:	e00a      	b.n	80016ec <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3301      	adds	r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4413      	add	r3, r2
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d3da      	bcc.n	80016a2 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80016ec:	f000 f878 	bl	80017e0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016f0:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <HAL_FLASHEx_Erase+0xd4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	761a      	strb	r2, [r3, #24]

  return status;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000000c 	.word	0x2000000c
 8001704:	40023c00 	.word	0x40023c00

08001708 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001714:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <FLASH_MassErase+0x44>)
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	4a0c      	ldr	r2, [pc, #48]	@ (800174c <FLASH_MassErase+0x44>)
 800171a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800171e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <FLASH_MassErase+0x44>)
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	4a09      	ldr	r2, [pc, #36]	@ (800174c <FLASH_MassErase+0x44>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800172c:	4b07      	ldr	r3, [pc, #28]	@ (800174c <FLASH_MassErase+0x44>)
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	4313      	orrs	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	@ (800174c <FLASH_MassErase+0x44>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800173c:	6113      	str	r3, [r2, #16]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	e010      	b.n	800178e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d103      	bne.n	800177a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	e009      	b.n	800178e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d103      	bne.n	8001788 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	e002      	b.n	800178e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001788:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800178c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800178e:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <FLASH_Erase_Sector+0x8c>)
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	4a12      	ldr	r2, [pc, #72]	@ (80017dc <FLASH_Erase_Sector+0x8c>)
 8001794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001798:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <FLASH_Erase_Sector+0x8c>)
 800179c:	691a      	ldr	r2, [r3, #16]
 800179e:	490f      	ldr	r1, [pc, #60]	@ (80017dc <FLASH_Erase_Sector+0x8c>)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80017a6:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <FLASH_Erase_Sector+0x8c>)
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	4a0c      	ldr	r2, [pc, #48]	@ (80017dc <FLASH_Erase_Sector+0x8c>)
 80017ac:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80017b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80017b2:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <FLASH_Erase_Sector+0x8c>)
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <FLASH_Erase_Sector+0x8c>)
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <FLASH_Erase_Sector+0x8c>)
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <FLASH_Erase_Sector+0x8c>)
 80017ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ce:	6113      	str	r3, [r2, #16]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80017e4:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <FLASH_FlushCaches+0x88>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d017      	beq.n	8001820 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80017f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <FLASH_FlushCaches+0x88>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001868 <FLASH_FlushCaches+0x88>)
 80017f6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80017fa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80017fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <FLASH_FlushCaches+0x88>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a19      	ldr	r2, [pc, #100]	@ (8001868 <FLASH_FlushCaches+0x88>)
 8001802:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <FLASH_FlushCaches+0x88>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a16      	ldr	r2, [pc, #88]	@ (8001868 <FLASH_FlushCaches+0x88>)
 800180e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001812:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001814:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <FLASH_FlushCaches+0x88>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a13      	ldr	r2, [pc, #76]	@ (8001868 <FLASH_FlushCaches+0x88>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800181e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <FLASH_FlushCaches+0x88>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001828:	2b00      	cmp	r3, #0
 800182a:	d017      	beq.n	800185c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800182c:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <FLASH_FlushCaches+0x88>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0d      	ldr	r2, [pc, #52]	@ (8001868 <FLASH_FlushCaches+0x88>)
 8001832:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001836:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001838:	4b0b      	ldr	r3, [pc, #44]	@ (8001868 <FLASH_FlushCaches+0x88>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <FLASH_FlushCaches+0x88>)
 800183e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <FLASH_FlushCaches+0x88>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a07      	ldr	r2, [pc, #28]	@ (8001868 <FLASH_FlushCaches+0x88>)
 800184a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800184e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001850:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <FLASH_FlushCaches+0x88>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a04      	ldr	r2, [pc, #16]	@ (8001868 <FLASH_FlushCaches+0x88>)
 8001856:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800185a:	6013      	str	r3, [r2, #0]
  }
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40023c00 	.word	0x40023c00

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	@ 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	e165      	b.n	8001b54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001888:	2201      	movs	r2, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f040 8154 	bne.w	8001b4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d005      	beq.n	80018be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d130      	bne.n	8001920 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f4:	2201      	movs	r2, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 0201 	and.w	r2, r3, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b03      	cmp	r3, #3
 800192a:	d017      	beq.n	800195c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d123      	bne.n	80019b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	08da      	lsrs	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3208      	adds	r2, #8
 8001970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	220f      	movs	r2, #15
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	08da      	lsrs	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3208      	adds	r2, #8
 80019aa:	69b9      	ldr	r1, [r7, #24]
 80019ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0203 	and.w	r2, r3, #3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 80ae 	beq.w	8001b4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b6c <HAL_GPIO_Init+0x300>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	4a5c      	ldr	r2, [pc, #368]	@ (8001b6c <HAL_GPIO_Init+0x300>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a02:	4b5a      	ldr	r3, [pc, #360]	@ (8001b6c <HAL_GPIO_Init+0x300>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a0e:	4a58      	ldr	r2, [pc, #352]	@ (8001b70 <HAL_GPIO_Init+0x304>)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4f      	ldr	r2, [pc, #316]	@ (8001b74 <HAL_GPIO_Init+0x308>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_Init+0x21a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b78 <HAL_GPIO_Init+0x30c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_Init+0x216>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4d      	ldr	r2, [pc, #308]	@ (8001b7c <HAL_GPIO_Init+0x310>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x212>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b80 <HAL_GPIO_Init+0x314>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x20e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4b      	ldr	r2, [pc, #300]	@ (8001b84 <HAL_GPIO_Init+0x318>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x20a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b88 <HAL_GPIO_Init+0x31c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x206>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a49      	ldr	r2, [pc, #292]	@ (8001b8c <HAL_GPIO_Init+0x320>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x202>
 8001a6a:	2306      	movs	r3, #6
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a6e:	2307      	movs	r3, #7
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x21c>
 8001a86:	2300      	movs	r3, #0
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a98:	4935      	ldr	r1, [pc, #212]	@ (8001b70 <HAL_GPIO_Init+0x304>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aca:	4a31      	ldr	r2, [pc, #196]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af4:	4a26      	ldr	r2, [pc, #152]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001afa:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b48:	4a11      	ldr	r2, [pc, #68]	@ (8001b90 <HAL_GPIO_Init+0x324>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f ae96 	bls.w	8001888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3724      	adds	r7, #36	@ 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40013800 	.word	0x40013800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40021400 	.word	0x40021400
 8001b8c:	40021800 	.word	0x40021800
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0cc      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b68      	ldr	r3, [pc, #416]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d90c      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b65      	ldr	r3, [pc, #404]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b63      	ldr	r3, [pc, #396]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0b8      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be8:	4b59      	ldr	r3, [pc, #356]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a58      	ldr	r2, [pc, #352]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c00:	4b53      	ldr	r3, [pc, #332]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a52      	ldr	r2, [pc, #328]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b50      	ldr	r3, [pc, #320]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	494d      	ldr	r1, [pc, #308]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d044      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b47      	ldr	r3, [pc, #284]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d119      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e07f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c52:	4b3f      	ldr	r3, [pc, #252]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	4b3b      	ldr	r3, [pc, #236]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e067      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c72:	4b37      	ldr	r3, [pc, #220]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4934      	ldr	r1, [pc, #208]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c84:	f7ff f9f8 	bl	8001078 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7ff f9f4 	bl	8001078 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e04f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1eb      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b25      	ldr	r3, [pc, #148]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d20c      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e032      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4916      	ldr	r1, [pc, #88]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d06:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	490e      	ldr	r1, [pc, #56]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d1a:	f000 f855 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	490a      	ldr	r1, [pc, #40]	@ (8001d54 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	5ccb      	ldrb	r3, [r1, r3]
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	4a09      	ldr	r2, [pc, #36]	@ (8001d58 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f958 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00
 8001d50:	40023800 	.word	0x40023800
 8001d54:	080030b8 	.word	0x080030b8
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d64:	4b03      	ldr	r3, [pc, #12]	@ (8001d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	f7ff fff0 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0a9b      	lsrs	r3, r3, #10
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	@ (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	080030c8 	.word	0x080030c8

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da4:	f7ff ffdc 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0b5b      	lsrs	r3, r3, #13
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	@ (8001dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	080030c8 	.word	0x080030c8

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dcc:	b0a6      	sub	sp, #152	@ 0x98
 8001dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dee:	4bc8      	ldr	r3, [pc, #800]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x348>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	f200 817e 	bhi.w	80020f8 <HAL_RCC_GetSysClockFreq+0x330>
 8001dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8001e04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e02:	bf00      	nop
 8001e04:	08001e39 	.word	0x08001e39
 8001e08:	080020f9 	.word	0x080020f9
 8001e0c:	080020f9 	.word	0x080020f9
 8001e10:	080020f9 	.word	0x080020f9
 8001e14:	08001e41 	.word	0x08001e41
 8001e18:	080020f9 	.word	0x080020f9
 8001e1c:	080020f9 	.word	0x080020f9
 8001e20:	080020f9 	.word	0x080020f9
 8001e24:	08001e49 	.word	0x08001e49
 8001e28:	080020f9 	.word	0x080020f9
 8001e2c:	080020f9 	.word	0x080020f9
 8001e30:	080020f9 	.word	0x080020f9
 8001e34:	08001fb3 	.word	0x08001fb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4bb6      	ldr	r3, [pc, #728]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001e3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001e3e:	e15f      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e40:	4bb5      	ldr	r3, [pc, #724]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001e46:	e15b      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e48:	4bb1      	ldr	r3, [pc, #708]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e54:	4bae      	ldr	r3, [pc, #696]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d031      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e60:	4bab      	ldr	r3, [pc, #684]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	099b      	lsrs	r3, r3, #6
 8001e66:	2200      	movs	r2, #0
 8001e68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e72:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e74:	2300      	movs	r3, #0
 8001e76:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e78:	4ba7      	ldr	r3, [pc, #668]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e7a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001e7e:	462a      	mov	r2, r5
 8001e80:	fb03 f202 	mul.w	r2, r3, r2
 8001e84:	2300      	movs	r3, #0
 8001e86:	4621      	mov	r1, r4
 8001e88:	fb01 f303 	mul.w	r3, r1, r3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4aa2      	ldr	r2, [pc, #648]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e90:	4621      	mov	r1, r4
 8001e92:	fba1 1202 	umull	r1, r2, r1, r2
 8001e96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001e98:	460a      	mov	r2, r1
 8001e9a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001e9c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001e9e:	4413      	add	r3, r2
 8001ea0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001eaa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001eac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001eb0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001eb4:	f7fe f9a6 	bl	8000204 <__aeabi_uldivmod>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001ec2:	e064      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ec4:	4b92      	ldr	r3, [pc, #584]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	099b      	lsrs	r3, r3, #6
 8001eca:	2200      	movs	r2, #0
 8001ecc:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ece:	657a      	str	r2, [r7, #84]	@ 0x54
 8001ed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ed8:	2300      	movs	r3, #0
 8001eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001edc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001ee0:	4622      	mov	r2, r4
 8001ee2:	462b      	mov	r3, r5
 8001ee4:	f04f 0000 	mov.w	r0, #0
 8001ee8:	f04f 0100 	mov.w	r1, #0
 8001eec:	0159      	lsls	r1, r3, #5
 8001eee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ef2:	0150      	lsls	r0, r2, #5
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4621      	mov	r1, r4
 8001efa:	1a51      	subs	r1, r2, r1
 8001efc:	6139      	str	r1, [r7, #16]
 8001efe:	4629      	mov	r1, r5
 8001f00:	eb63 0301 	sbc.w	r3, r3, r1
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f12:	4659      	mov	r1, fp
 8001f14:	018b      	lsls	r3, r1, #6
 8001f16:	4651      	mov	r1, sl
 8001f18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f1c:	4651      	mov	r1, sl
 8001f1e:	018a      	lsls	r2, r1, #6
 8001f20:	4651      	mov	r1, sl
 8001f22:	ebb2 0801 	subs.w	r8, r2, r1
 8001f26:	4659      	mov	r1, fp
 8001f28:	eb63 0901 	sbc.w	r9, r3, r1
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f40:	4690      	mov	r8, r2
 8001f42:	4699      	mov	r9, r3
 8001f44:	4623      	mov	r3, r4
 8001f46:	eb18 0303 	adds.w	r3, r8, r3
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	462b      	mov	r3, r5
 8001f4e:	eb49 0303 	adc.w	r3, r9, r3
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f60:	4629      	mov	r1, r5
 8001f62:	028b      	lsls	r3, r1, #10
 8001f64:	4621      	mov	r1, r4
 8001f66:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	028a      	lsls	r2, r1, #10
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f76:	2200      	movs	r2, #0
 8001f78:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8001f7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f80:	f7fe f940 	bl	8000204 <__aeabi_uldivmod>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4613      	mov	r3, r2
 8001f8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f8e:	4b60      	ldr	r3, [pc, #384]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	0c1b      	lsrs	r3, r3, #16
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001fa0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001fb0:	e0a6      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fb2:	4b57      	ldr	r3, [pc, #348]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x348>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fbe:	4b54      	ldr	r3, [pc, #336]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x348>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d02a      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fca:	4b51      	ldr	r3, [pc, #324]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x348>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	099b      	lsrs	r3, r3, #6
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4b4e      	ldr	r3, [pc, #312]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x350>)
 8001fe0:	fb03 f201 	mul.w	r2, r3, r1
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	fb00 f303 	mul.w	r3, r0, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	4a4a      	ldr	r2, [pc, #296]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x350>)
 8001fee:	fba0 1202 	umull	r1, r2, r0, r2
 8001ff2:	677a      	str	r2, [r7, #116]	@ 0x74
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	673a      	str	r2, [r7, #112]	@ 0x70
 8001ff8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001ffa:	4413      	add	r3, r2
 8001ffc:	677b      	str	r3, [r7, #116]	@ 0x74
 8001ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002002:	2200      	movs	r2, #0
 8002004:	633b      	str	r3, [r7, #48]	@ 0x30
 8002006:	637a      	str	r2, [r7, #52]	@ 0x34
 8002008:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800200c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002010:	f7fe f8f8 	bl	8000204 <__aeabi_uldivmod>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4613      	mov	r3, r2
 800201a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800201e:	e05b      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002020:	4b3b      	ldr	r3, [pc, #236]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x348>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	2200      	movs	r2, #0
 8002028:	62bb      	str	r3, [r7, #40]	@ 0x28
 800202a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800202c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800202e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002032:	623b      	str	r3, [r7, #32]
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
 8002038:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800203c:	4642      	mov	r2, r8
 800203e:	464b      	mov	r3, r9
 8002040:	f04f 0000 	mov.w	r0, #0
 8002044:	f04f 0100 	mov.w	r1, #0
 8002048:	0159      	lsls	r1, r3, #5
 800204a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800204e:	0150      	lsls	r0, r2, #5
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4641      	mov	r1, r8
 8002056:	ebb2 0a01 	subs.w	sl, r2, r1
 800205a:	4649      	mov	r1, r9
 800205c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800206c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002070:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002074:	ebb2 040a 	subs.w	r4, r2, sl
 8002078:	eb63 050b 	sbc.w	r5, r3, fp
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	00eb      	lsls	r3, r5, #3
 8002086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800208a:	00e2      	lsls	r2, r4, #3
 800208c:	4614      	mov	r4, r2
 800208e:	461d      	mov	r5, r3
 8002090:	4643      	mov	r3, r8
 8002092:	18e3      	adds	r3, r4, r3
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	464b      	mov	r3, r9
 8002098:	eb45 0303 	adc.w	r3, r5, r3
 800209c:	607b      	str	r3, [r7, #4]
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020aa:	4629      	mov	r1, r5
 80020ac:	028b      	lsls	r3, r1, #10
 80020ae:	4621      	mov	r1, r4
 80020b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020b4:	4621      	mov	r1, r4
 80020b6:	028a      	lsls	r2, r1, #10
 80020b8:	4610      	mov	r0, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020c0:	2200      	movs	r2, #0
 80020c2:	61bb      	str	r3, [r7, #24]
 80020c4:	61fa      	str	r2, [r7, #28]
 80020c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020ca:	f7fe f89b 	bl	8000204 <__aeabi_uldivmod>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4613      	mov	r3, r2
 80020d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002110 <HAL_RCC_GetSysClockFreq+0x348>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	0f1b      	lsrs	r3, r3, #28
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80020e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80020ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80020f6:	e003      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x34c>)
 80020fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80020fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002100:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002104:	4618      	mov	r0, r3
 8002106:	3798      	adds	r7, #152	@ 0x98
 8002108:	46bd      	mov	sp, r7
 800210a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	00f42400 	.word	0x00f42400
 8002118:	017d7840 	.word	0x017d7840

0800211c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e28d      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8083 	beq.w	8002242 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800213c:	4b94      	ldr	r3, [pc, #592]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b04      	cmp	r3, #4
 8002146:	d019      	beq.n	800217c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002148:	4b91      	ldr	r3, [pc, #580]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002150:	2b08      	cmp	r3, #8
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002154:	4b8e      	ldr	r3, [pc, #568]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800215c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002160:	d00c      	beq.n	800217c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002162:	4b8b      	ldr	r3, [pc, #556]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800216a:	2b0c      	cmp	r3, #12
 800216c:	d112      	bne.n	8002194 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800216e:	4b88      	ldr	r3, [pc, #544]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002176:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800217a:	d10b      	bne.n	8002194 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217c:	4b84      	ldr	r3, [pc, #528]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d05b      	beq.n	8002240 <HAL_RCC_OscConfig+0x124>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d157      	bne.n	8002240 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e25a      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800219c:	d106      	bne.n	80021ac <HAL_RCC_OscConfig+0x90>
 800219e:	4b7c      	ldr	r3, [pc, #496]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a7b      	ldr	r2, [pc, #492]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e01d      	b.n	80021e8 <HAL_RCC_OscConfig+0xcc>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0xb4>
 80021b6:	4b76      	ldr	r3, [pc, #472]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a75      	ldr	r2, [pc, #468]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b73      	ldr	r3, [pc, #460]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a72      	ldr	r2, [pc, #456]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0xcc>
 80021d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe ff42 	bl	8001078 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7fe ff3e 	bl	8001078 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	@ 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e21f      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	4b61      	ldr	r3, [pc, #388]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0xdc>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe ff2e 	bl	8001078 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe ff2a 	bl	8001078 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	@ 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e20b      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	4b57      	ldr	r3, [pc, #348]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x104>
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d06f      	beq.n	800232e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800224e:	4b50      	ldr	r3, [pc, #320]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b00      	cmp	r3, #0
 8002258:	d017      	beq.n	800228a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800225a:	4b4d      	ldr	r3, [pc, #308]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002262:	2b08      	cmp	r3, #8
 8002264:	d105      	bne.n	8002272 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002266:	4b4a      	ldr	r3, [pc, #296]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002272:	4b47      	ldr	r3, [pc, #284]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800227a:	2b0c      	cmp	r3, #12
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800227e:	4b44      	ldr	r3, [pc, #272]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b41      	ldr	r3, [pc, #260]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x186>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1d3      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4937      	ldr	r1, [pc, #220]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e03a      	b.n	800232e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <HAL_RCC_OscConfig+0x278>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7fe fed7 	bl	8001078 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ce:	f7fe fed3 	bl	8001078 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1b4      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b28      	ldr	r3, [pc, #160]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4925      	ldr	r1, [pc, #148]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b24      	ldr	r3, [pc, #144]	@ (8002394 <HAL_RCC_OscConfig+0x278>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe feb6 	bl	8001078 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002310:	f7fe feb2 	bl	8001078 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e193      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b1b      	ldr	r3, [pc, #108]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d036      	beq.n	80023a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <HAL_RCC_OscConfig+0x27c>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7fe fe96 	bl	8001078 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002350:	f7fe fe92 	bl	8001078 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e173      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <HAL_RCC_OscConfig+0x274>)
 8002364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x234>
 800236e:	e01b      	b.n	80023a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002370:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <HAL_RCC_OscConfig+0x27c>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7fe fe7f 	bl	8001078 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	e00e      	b.n	800239c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237e:	f7fe fe7b 	bl	8001078 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d907      	bls.n	800239c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e15c      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
 8002390:	40023800 	.word	0x40023800
 8002394:	42470000 	.word	0x42470000
 8002398:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239c:	4b8a      	ldr	r3, [pc, #552]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 800239e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ea      	bne.n	800237e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8097 	beq.w	80024e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ba:	4b83      	ldr	r3, [pc, #524]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10f      	bne.n	80023e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	4b7f      	ldr	r3, [pc, #508]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	4a7e      	ldr	r2, [pc, #504]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d6:	4b7c      	ldr	r3, [pc, #496]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e2:	2301      	movs	r3, #1
 80023e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e6:	4b79      	ldr	r3, [pc, #484]	@ (80025cc <HAL_RCC_OscConfig+0x4b0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f2:	4b76      	ldr	r3, [pc, #472]	@ (80025cc <HAL_RCC_OscConfig+0x4b0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a75      	ldr	r2, [pc, #468]	@ (80025cc <HAL_RCC_OscConfig+0x4b0>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fe:	f7fe fe3b 	bl	8001078 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002406:	f7fe fe37 	bl	8001078 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e118      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	4b6c      	ldr	r3, [pc, #432]	@ (80025cc <HAL_RCC_OscConfig+0x4b0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x31e>
 800242c:	4b66      	ldr	r3, [pc, #408]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002430:	4a65      	ldr	r2, [pc, #404]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6713      	str	r3, [r2, #112]	@ 0x70
 8002438:	e01c      	b.n	8002474 <HAL_RCC_OscConfig+0x358>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x340>
 8002442:	4b61      	ldr	r3, [pc, #388]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002446:	4a60      	ldr	r2, [pc, #384]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6713      	str	r3, [r2, #112]	@ 0x70
 800244e:	4b5e      	ldr	r3, [pc, #376]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002452:	4a5d      	ldr	r2, [pc, #372]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6713      	str	r3, [r2, #112]	@ 0x70
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0x358>
 800245c:	4b5a      	ldr	r3, [pc, #360]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002460:	4a59      	ldr	r2, [pc, #356]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	6713      	str	r3, [r2, #112]	@ 0x70
 8002468:	4b57      	ldr	r3, [pc, #348]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246c:	4a56      	ldr	r2, [pc, #344]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 800246e:	f023 0304 	bic.w	r3, r3, #4
 8002472:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d015      	beq.n	80024a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247c:	f7fe fdfc 	bl	8001078 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002482:	e00a      	b.n	800249a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002484:	f7fe fdf8 	bl	8001078 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e0d7      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249a:	4b4b      	ldr	r3, [pc, #300]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0ee      	beq.n	8002484 <HAL_RCC_OscConfig+0x368>
 80024a6:	e014      	b.n	80024d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7fe fde6 	bl	8001078 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b0:	f7fe fde2 	bl	8001078 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0c1      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c6:	4b40      	ldr	r3, [pc, #256]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1ee      	bne.n	80024b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d105      	bne.n	80024e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d8:	4b3b      	ldr	r3, [pc, #236]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	4a3a      	ldr	r2, [pc, #232]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 80024de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80ad 	beq.w	8002648 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ee:	4b36      	ldr	r3, [pc, #216]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d060      	beq.n	80025bc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d145      	bne.n	800258e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b33      	ldr	r3, [pc, #204]	@ (80025d0 <HAL_RCC_OscConfig+0x4b4>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe fdb6 	bl	8001078 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe fdb2 	bl	8001078 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e093      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	4b29      	ldr	r3, [pc, #164]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69da      	ldr	r2, [r3, #28]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	019b      	lsls	r3, r3, #6
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	3b01      	subs	r3, #1
 8002548:	041b      	lsls	r3, r3, #16
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002558:	071b      	lsls	r3, r3, #28
 800255a:	491b      	ldr	r1, [pc, #108]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002560:	4b1b      	ldr	r3, [pc, #108]	@ (80025d0 <HAL_RCC_OscConfig+0x4b4>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe fd87 	bl	8001078 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256e:	f7fe fd83 	bl	8001078 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e064      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002580:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x452>
 800258c:	e05c      	b.n	8002648 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <HAL_RCC_OscConfig+0x4b4>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe fd70 	bl	8001078 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259c:	f7fe fd6c 	bl	8001078 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e04d      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_RCC_OscConfig+0x4ac>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x480>
 80025ba:	e045      	b.n	8002648 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e040      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40007000 	.word	0x40007000
 80025d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002654 <HAL_RCC_OscConfig+0x538>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d030      	beq.n	8002644 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d129      	bne.n	8002644 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d122      	bne.n	8002644 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002604:	4013      	ands	r3, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800260a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800260c:	4293      	cmp	r3, r2
 800260e:	d119      	bne.n	8002644 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261a:	085b      	lsrs	r3, r3, #1
 800261c:	3b01      	subs	r3, #1
 800261e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d10f      	bne.n	8002644 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d107      	bne.n	8002644 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800

08002658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e042      	b.n	80026f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe fbe0 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2224      	movs	r2, #36	@ 0x24
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800269a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fa09 	bl	8002ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	@ 0x28
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b20      	cmp	r3, #32
 8002716:	d175      	bne.n	8002804 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_UART_Transmit+0x2c>
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e06e      	b.n	8002806 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2221      	movs	r2, #33	@ 0x21
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002736:	f7fe fc9f 	bl	8001078 <HAL_GetTick>
 800273a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	88fa      	ldrh	r2, [r7, #6]
 8002740:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	88fa      	ldrh	r2, [r7, #6]
 8002746:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002750:	d108      	bne.n	8002764 <HAL_UART_Transmit+0x6c>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d104      	bne.n	8002764 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	e003      	b.n	800276c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800276c:	e02e      	b.n	80027cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2200      	movs	r2, #0
 8002776:	2180      	movs	r1, #128	@ 0x80
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f8df 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e03a      	b.n	8002806 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	3302      	adds	r3, #2
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	e007      	b.n	80027be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	781a      	ldrb	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	3301      	adds	r3, #1
 80027bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1cb      	bne.n	800276e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2200      	movs	r2, #0
 80027de:	2140      	movs	r1, #64	@ 0x40
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f8ab 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e006      	b.n	8002806 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	e000      	b.n	8002806 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002804:	2302      	movs	r3, #2
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b08a      	sub	sp, #40	@ 0x28
 8002812:	af02      	add	r7, sp, #8
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b20      	cmp	r3, #32
 800282c:	f040 8081 	bne.w	8002932 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_UART_Receive+0x2e>
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e079      	b.n	8002934 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2222      	movs	r2, #34	@ 0x22
 800284a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002854:	f7fe fc10 	bl	8001078 <HAL_GetTick>
 8002858:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	88fa      	ldrh	r2, [r7, #6]
 800285e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	88fa      	ldrh	r2, [r7, #6]
 8002864:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800286e:	d108      	bne.n	8002882 <HAL_UART_Receive+0x74>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d104      	bne.n	8002882 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	e003      	b.n	800288a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800288a:	e047      	b.n	800291c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	2120      	movs	r1, #32
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f850 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e042      	b.n	8002934 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10c      	bne.n	80028ce <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	3302      	adds	r3, #2
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	e01f      	b.n	800290e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028d6:	d007      	beq.n	80028e8 <HAL_UART_Receive+0xda>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <HAL_UART_Receive+0xe8>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d106      	bne.n	80028f6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	701a      	strb	r2, [r3, #0]
 80028f4:	e008      	b.n	8002908 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002902:	b2da      	uxtb	r2, r3
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	3301      	adds	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1b2      	bne.n	800288c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	e000      	b.n	8002934 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002932:	2302      	movs	r3, #2
  }
}
 8002934:	4618      	mov	r0, r3
 8002936:	3720      	adds	r7, #32
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294c:	e03b      	b.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d037      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002956:	f7fe fb8f 	bl	8001078 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	429a      	cmp	r2, r3
 8002964:	d302      	bcc.n	800296c <UART_WaitOnFlagUntilTimeout+0x30>
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e03a      	b.n	80029e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d023      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b80      	cmp	r3, #128	@ 0x80
 8002982:	d020      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b40      	cmp	r3, #64	@ 0x40
 8002988:	d01d      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b08      	cmp	r3, #8
 8002996:	d116      	bne.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f81d 	bl	80029ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2208      	movs	r2, #8
 80029b8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00f      	b.n	80029e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4013      	ands	r3, r2
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	bf0c      	ite	eq
 80029d6:	2301      	moveq	r3, #1
 80029d8:	2300      	movne	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d0b4      	beq.n	800294e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b095      	sub	sp, #84	@ 0x54
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	330c      	adds	r3, #12
 80029fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a00:	e853 3f00 	ldrex	r3, [r3]
 8002a04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	330c      	adds	r3, #12
 8002a14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a16:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a1e:	e841 2300 	strex	r3, r2, [r1]
 8002a22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1e5      	bne.n	80029f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3314      	adds	r3, #20
 8002a30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	e853 3f00 	ldrex	r3, [r3]
 8002a38:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3314      	adds	r3, #20
 8002a48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e5      	bne.n	8002a2a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d119      	bne.n	8002a9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	330c      	adds	r3, #12
 8002a6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	e853 3f00 	ldrex	r3, [r3]
 8002a74:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f023 0310 	bic.w	r3, r3, #16
 8002a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a86:	61ba      	str	r2, [r7, #24]
 8002a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8a:	6979      	ldr	r1, [r7, #20]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	e841 2300 	strex	r3, r2, [r1]
 8002a92:	613b      	str	r3, [r7, #16]
   return(result);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e5      	bne.n	8002a66 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002aa8:	bf00      	nop
 8002aaa:	3754      	adds	r7, #84	@ 0x54
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab8:	b0c0      	sub	sp, #256	@ 0x100
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad0:	68d9      	ldr	r1, [r3, #12]
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	ea40 0301 	orr.w	r3, r0, r1
 8002adc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b0c:	f021 010c 	bic.w	r1, r1, #12
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2e:	6999      	ldr	r1, [r3, #24]
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	ea40 0301 	orr.w	r3, r0, r1
 8002b3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b8f      	ldr	r3, [pc, #572]	@ (8002d80 <UART_SetConfig+0x2cc>)
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d005      	beq.n	8002b54 <UART_SetConfig+0xa0>
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b8d      	ldr	r3, [pc, #564]	@ (8002d84 <UART_SetConfig+0x2d0>)
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d104      	bne.n	8002b5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b54:	f7ff f924 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8002b58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b5c:	e003      	b.n	8002b66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b5e:	f7ff f90b 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002b62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b70:	f040 810c 	bne.w	8002d8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b86:	4622      	mov	r2, r4
 8002b88:	462b      	mov	r3, r5
 8002b8a:	1891      	adds	r1, r2, r2
 8002b8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b8e:	415b      	adcs	r3, r3
 8002b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b96:	4621      	mov	r1, r4
 8002b98:	eb12 0801 	adds.w	r8, r2, r1
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	eb43 0901 	adc.w	r9, r3, r1
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bb6:	4690      	mov	r8, r2
 8002bb8:	4699      	mov	r9, r3
 8002bba:	4623      	mov	r3, r4
 8002bbc:	eb18 0303 	adds.w	r3, r8, r3
 8002bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002bc4:	462b      	mov	r3, r5
 8002bc6:	eb49 0303 	adc.w	r3, r9, r3
 8002bca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002bda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002bde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002be2:	460b      	mov	r3, r1
 8002be4:	18db      	adds	r3, r3, r3
 8002be6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002be8:	4613      	mov	r3, r2
 8002bea:	eb42 0303 	adc.w	r3, r2, r3
 8002bee:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002bf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002bf8:	f7fd fb04 	bl	8000204 <__aeabi_uldivmod>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4b61      	ldr	r3, [pc, #388]	@ (8002d88 <UART_SetConfig+0x2d4>)
 8002c02:	fba3 2302 	umull	r2, r3, r3, r2
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	011c      	lsls	r4, r3, #4
 8002c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c1c:	4642      	mov	r2, r8
 8002c1e:	464b      	mov	r3, r9
 8002c20:	1891      	adds	r1, r2, r2
 8002c22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c24:	415b      	adcs	r3, r3
 8002c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c2c:	4641      	mov	r1, r8
 8002c2e:	eb12 0a01 	adds.w	sl, r2, r1
 8002c32:	4649      	mov	r1, r9
 8002c34:	eb43 0b01 	adc.w	fp, r3, r1
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c4c:	4692      	mov	sl, r2
 8002c4e:	469b      	mov	fp, r3
 8002c50:	4643      	mov	r3, r8
 8002c52:	eb1a 0303 	adds.w	r3, sl, r3
 8002c56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	18db      	adds	r3, r3, r3
 8002c7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c7e:	4613      	mov	r3, r2
 8002c80:	eb42 0303 	adc.w	r3, r2, r3
 8002c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c8e:	f7fd fab9 	bl	8000204 <__aeabi_uldivmod>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	4b3b      	ldr	r3, [pc, #236]	@ (8002d88 <UART_SetConfig+0x2d4>)
 8002c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2264      	movs	r2, #100	@ 0x64
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	1acb      	subs	r3, r1, r3
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002cae:	4b36      	ldr	r3, [pc, #216]	@ (8002d88 <UART_SetConfig+0x2d4>)
 8002cb0:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002cbc:	441c      	add	r4, r3
 8002cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cc8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ccc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002cd0:	4642      	mov	r2, r8
 8002cd2:	464b      	mov	r3, r9
 8002cd4:	1891      	adds	r1, r2, r2
 8002cd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cd8:	415b      	adcs	r3, r3
 8002cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ce0:	4641      	mov	r1, r8
 8002ce2:	1851      	adds	r1, r2, r1
 8002ce4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	414b      	adcs	r3, r1
 8002cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002cf8:	4659      	mov	r1, fp
 8002cfa:	00cb      	lsls	r3, r1, #3
 8002cfc:	4651      	mov	r1, sl
 8002cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d02:	4651      	mov	r1, sl
 8002d04:	00ca      	lsls	r2, r1, #3
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4642      	mov	r2, r8
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d14:	464b      	mov	r3, r9
 8002d16:	460a      	mov	r2, r1
 8002d18:	eb42 0303 	adc.w	r3, r2, r3
 8002d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d34:	460b      	mov	r3, r1
 8002d36:	18db      	adds	r3, r3, r3
 8002d38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	eb42 0303 	adc.w	r3, r2, r3
 8002d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d4a:	f7fd fa5b 	bl	8000204 <__aeabi_uldivmod>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <UART_SetConfig+0x2d4>)
 8002d54:	fba3 1302 	umull	r1, r3, r3, r2
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	2164      	movs	r1, #100	@ 0x64
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	3332      	adds	r3, #50	@ 0x32
 8002d66:	4a08      	ldr	r2, [pc, #32]	@ (8002d88 <UART_SetConfig+0x2d4>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	f003 0207 	and.w	r2, r3, #7
 8002d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4422      	add	r2, r4
 8002d7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d7c:	e106      	b.n	8002f8c <UART_SetConfig+0x4d8>
 8002d7e:	bf00      	nop
 8002d80:	40011000 	.word	0x40011000
 8002d84:	40011400 	.word	0x40011400
 8002d88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d90:	2200      	movs	r2, #0
 8002d92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d9e:	4642      	mov	r2, r8
 8002da0:	464b      	mov	r3, r9
 8002da2:	1891      	adds	r1, r2, r2
 8002da4:	6239      	str	r1, [r7, #32]
 8002da6:	415b      	adcs	r3, r3
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002daa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dae:	4641      	mov	r1, r8
 8002db0:	1854      	adds	r4, r2, r1
 8002db2:	4649      	mov	r1, r9
 8002db4:	eb43 0501 	adc.w	r5, r3, r1
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	00eb      	lsls	r3, r5, #3
 8002dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dc6:	00e2      	lsls	r2, r4, #3
 8002dc8:	4614      	mov	r4, r2
 8002dca:	461d      	mov	r5, r3
 8002dcc:	4643      	mov	r3, r8
 8002dce:	18e3      	adds	r3, r4, r3
 8002dd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002dd4:	464b      	mov	r3, r9
 8002dd6:	eb45 0303 	adc.w	r3, r5, r3
 8002dda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002dea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	008b      	lsls	r3, r1, #2
 8002dfe:	4621      	mov	r1, r4
 8002e00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e04:	4621      	mov	r1, r4
 8002e06:	008a      	lsls	r2, r1, #2
 8002e08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e0c:	f7fd f9fa 	bl	8000204 <__aeabi_uldivmod>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4b60      	ldr	r3, [pc, #384]	@ (8002f98 <UART_SetConfig+0x4e4>)
 8002e16:	fba3 2302 	umull	r2, r3, r3, r2
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	011c      	lsls	r4, r3, #4
 8002e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e22:	2200      	movs	r2, #0
 8002e24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e30:	4642      	mov	r2, r8
 8002e32:	464b      	mov	r3, r9
 8002e34:	1891      	adds	r1, r2, r2
 8002e36:	61b9      	str	r1, [r7, #24]
 8002e38:	415b      	adcs	r3, r3
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e40:	4641      	mov	r1, r8
 8002e42:	1851      	adds	r1, r2, r1
 8002e44:	6139      	str	r1, [r7, #16]
 8002e46:	4649      	mov	r1, r9
 8002e48:	414b      	adcs	r3, r1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e58:	4659      	mov	r1, fp
 8002e5a:	00cb      	lsls	r3, r1, #3
 8002e5c:	4651      	mov	r1, sl
 8002e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e62:	4651      	mov	r1, sl
 8002e64:	00ca      	lsls	r2, r1, #3
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4642      	mov	r2, r8
 8002e6e:	189b      	adds	r3, r3, r2
 8002e70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e74:	464b      	mov	r3, r9
 8002e76:	460a      	mov	r2, r1
 8002e78:	eb42 0303 	adc.w	r3, r2, r3
 8002e7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e98:	4649      	mov	r1, r9
 8002e9a:	008b      	lsls	r3, r1, #2
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ea2:	4641      	mov	r1, r8
 8002ea4:	008a      	lsls	r2, r1, #2
 8002ea6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002eaa:	f7fd f9ab 	bl	8000204 <__aeabi_uldivmod>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4b38      	ldr	r3, [pc, #224]	@ (8002f98 <UART_SetConfig+0x4e4>)
 8002eb6:	fba3 2301 	umull	r2, r3, r3, r1
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	2264      	movs	r2, #100	@ 0x64
 8002ebe:	fb02 f303 	mul.w	r3, r2, r3
 8002ec2:	1acb      	subs	r3, r1, r3
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	3332      	adds	r3, #50	@ 0x32
 8002ec8:	4a33      	ldr	r2, [pc, #204]	@ (8002f98 <UART_SetConfig+0x4e4>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ed4:	441c      	add	r4, r3
 8002ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eda:	2200      	movs	r2, #0
 8002edc:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ede:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ee0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ee4:	4642      	mov	r2, r8
 8002ee6:	464b      	mov	r3, r9
 8002ee8:	1891      	adds	r1, r2, r2
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	415b      	adcs	r3, r3
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ef4:	4641      	mov	r1, r8
 8002ef6:	1851      	adds	r1, r2, r1
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	4649      	mov	r1, r9
 8002efc:	414b      	adcs	r3, r1
 8002efe:	607b      	str	r3, [r7, #4]
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f0c:	4659      	mov	r1, fp
 8002f0e:	00cb      	lsls	r3, r1, #3
 8002f10:	4651      	mov	r1, sl
 8002f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f16:	4651      	mov	r1, sl
 8002f18:	00ca      	lsls	r2, r1, #3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4642      	mov	r2, r8
 8002f22:	189b      	adds	r3, r3, r2
 8002f24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f26:	464b      	mov	r3, r9
 8002f28:	460a      	mov	r2, r1
 8002f2a:	eb42 0303 	adc.w	r3, r2, r3
 8002f2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f48:	4649      	mov	r1, r9
 8002f4a:	008b      	lsls	r3, r1, #2
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f52:	4641      	mov	r1, r8
 8002f54:	008a      	lsls	r2, r1, #2
 8002f56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f5a:	f7fd f953 	bl	8000204 <__aeabi_uldivmod>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <UART_SetConfig+0x4e4>)
 8002f64:	fba3 1302 	umull	r1, r3, r3, r2
 8002f68:	095b      	lsrs	r3, r3, #5
 8002f6a:	2164      	movs	r1, #100	@ 0x64
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	3332      	adds	r3, #50	@ 0x32
 8002f76:	4a08      	ldr	r2, [pc, #32]	@ (8002f98 <UART_SetConfig+0x4e4>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	f003 020f 	and.w	r2, r3, #15
 8002f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4422      	add	r2, r4
 8002f8a:	609a      	str	r2, [r3, #8]
}
 8002f8c:	bf00      	nop
 8002f8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f92:	46bd      	mov	sp, r7
 8002f94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f98:	51eb851f 	.word	0x51eb851f

08002f9c <memset>:
 8002f9c:	4402      	add	r2, r0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d100      	bne.n	8002fa6 <memset+0xa>
 8002fa4:	4770      	bx	lr
 8002fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8002faa:	e7f9      	b.n	8002fa0 <memset+0x4>

08002fac <__libc_init_array>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	4d0d      	ldr	r5, [pc, #52]	@ (8002fe4 <__libc_init_array+0x38>)
 8002fb0:	4c0d      	ldr	r4, [pc, #52]	@ (8002fe8 <__libc_init_array+0x3c>)
 8002fb2:	1b64      	subs	r4, r4, r5
 8002fb4:	10a4      	asrs	r4, r4, #2
 8002fb6:	2600      	movs	r6, #0
 8002fb8:	42a6      	cmp	r6, r4
 8002fba:	d109      	bne.n	8002fd0 <__libc_init_array+0x24>
 8002fbc:	4d0b      	ldr	r5, [pc, #44]	@ (8002fec <__libc_init_array+0x40>)
 8002fbe:	4c0c      	ldr	r4, [pc, #48]	@ (8002ff0 <__libc_init_array+0x44>)
 8002fc0:	f000 f818 	bl	8002ff4 <_init>
 8002fc4:	1b64      	subs	r4, r4, r5
 8002fc6:	10a4      	asrs	r4, r4, #2
 8002fc8:	2600      	movs	r6, #0
 8002fca:	42a6      	cmp	r6, r4
 8002fcc:	d105      	bne.n	8002fda <__libc_init_array+0x2e>
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd4:	4798      	blx	r3
 8002fd6:	3601      	adds	r6, #1
 8002fd8:	e7ee      	b.n	8002fb8 <__libc_init_array+0xc>
 8002fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fde:	4798      	blx	r3
 8002fe0:	3601      	adds	r6, #1
 8002fe2:	e7f2      	b.n	8002fca <__libc_init_array+0x1e>
 8002fe4:	080030d8 	.word	0x080030d8
 8002fe8:	080030d8 	.word	0x080030d8
 8002fec:	080030d8 	.word	0x080030d8
 8002ff0:	080030dc 	.word	0x080030dc

08002ff4 <_init>:
 8002ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff6:	bf00      	nop
 8002ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffa:	bc08      	pop	{r3}
 8002ffc:	469e      	mov	lr, r3
 8002ffe:	4770      	bx	lr

08003000 <_fini>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	bf00      	nop
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr
